{"version":3,"sources":["reducers/journal-reducer.js","actions/index.js","reducers/entries-reducer.js","reducers/items-reducer.js","status-types.js","reducers/index.js","components/ListEntries.js","components/AddItem.js","components/StatusSelector.js","components/Item.js","components/ListItems.js","components/ShowEntry.js","App.js","local-store.js","serviceWorker.js","index.js"],"names":["journalReducer","state","currentEntry","action","type","payload","index","length","defaultState","name","date","Date","entriesReducer","makeItem","text","status","itemsReducer","carryOverItems","filter","item","map","newState","list","i","entryIndex","j","combineReducers","journal","entries","items","connect","selectEntry","props","key","onClick","addItem","useState","setText","placeholder","value","onChange","e","target","StatusSelector","setStatus","changeStatus","changeText","onBlur","entriesLength","entry","addEntry","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","reducers","subscribe","stringify","setItem","console","log","saveState","getState","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f13d4f30.chunk.js","sourcesContent":["import { SELECT_ENTRY, ADD_ENTRY } from '../actions'\n\nconst defaultState = () => {\n  return {\n    currentEntry: 0\n  }\n}\n\nconst journalReducer = (state = defaultState(), action) => {\n  const { type, payload } = action\n  \n  switch(type) {\n    case SELECT_ENTRY:\n      return { ...state, currentEntry: payload.index }\n\n    case ADD_ENTRY: \n      return { ...state, currentEntry: payload.length }\n\n    default:\n      return state\n  }\n}\n\nexport default journalReducer\n\n","export const ADD_ITEM = 'ADD_ITEM'\nexport const CHANGE_STATUS = 'CHANGE_STATUS'\nexport const CHANGE_TEXT = 'CHANGE_TEXT'\nexport const ADD_ENTRY = 'ADD_ENTRY'\nexport const SELECT_ENTRY = 'SELECT_ENTRY'\n\nexport const addEntry = (name, length) => {\n  return {\n    type: ADD_ENTRY,\n    payload: { name, length }\n  }\n}\n\nexport const addItem = (index, text) => {\n  return {\n    type: ADD_ITEM,\n    payload: { index, text }\n  }\n}\n\nexport const changeStatus = (entryIndex, index, status) => {\n  return {\n    type: CHANGE_STATUS,\n    payload: { entryIndex, index, status }\n  }\n}\n\nexport const changeText = (entryIndex, index, text) => {\n  return {\n    type: CHANGE_TEXT,\n    payload: { entryIndex, index, text }\n  }\n}\n\nexport const selectEntry = (index) => {\n  return {\n    type: SELECT_ENTRY,\n    payload: { index }\n  }\n}","import { ADD_ENTRY } from '../actions'\n\n// State is a list of Objects\n\nconst defaultState = (name = 'Entry 1') => {\n  return [\n    { name, date: new Date() }\n  ]\n}\n\nconst entriesReducer = (state = defaultState(), action) => {\n  const { type, payload } = action\n\n  switch(type) {\n    case ADD_ENTRY: \n      const name = `Entry ${state.length + 1}`\n      return [...state, { name, date: new Date() }]\n\n    default: \n      return state\n  }\n}\n\nexport default entriesReducer","import { ADD_ENTRY, ADD_ITEM, CHANGE_STATUS, CHANGE_TEXT } from '../actions'\nimport { STATUS_DEFAULT, STATUS_INCOMPLETE } from '../status-types'\n\n// A list of lists of items\n\nconst defaultState = () => {\n  return [[]]\n}\n\nconst makeItem = (text, status = STATUS_DEFAULT) => {\n  return {\n    text, \n    status\n  }\n}\n\nconst itemsReducer = (state = defaultState(), action) => {\n  const { type, payload } = action\n\n  switch(type) {\n    case ADD_ENTRY: \n      const carryOverItems = state[state.length - 1]\n        .filter(item => item.status === STATUS_INCOMPLETE)\n        .map(item => ({...item}))\n        \n      return [...state, carryOverItems]\n\n    case ADD_ITEM: \n      const newState = [...state]\n      newState[payload.index] = [ ...newState[payload.index], makeItem(payload.text) ]\n      return newState\n    \n    case CHANGE_STATUS: \n      return state.map((list, i) => {\n        if (i === payload.entryIndex) {\n          return list.map((item, j) => {\n            if (j === payload.index) {\n              return { ...item, status: payload.status }\n            }\n            return item\n          })\n        } \n        return list\n      })\n    \n    case CHANGE_TEXT: \n      return state.map((list, i) => {\n        if (i === payload.entryIndex) {\n          return list.map((item, j) => {\n            if (j === payload.index) {\n              return { ...item, text: payload.text }\n            }\n            return item\n          })\n        } \n        return list\n      })\n\n    default: \n      return state\n  }\n}\n\nexport default itemsReducer","export const STATUS_DEFAULT = '•'\nexport const STATUS_COMPLETE = 'X'\nexport const STATUS_INCOMPLETE = '>'\nexport const STATUS_SAVE = '<'\nexport const STATUS_NOTE = '–'\nexport const STATUS_EVENT = '!'","import { combineReducers } from 'redux'\n\nimport journalReducer from './journal-reducer'\nimport entriesReducer from './entries-reducer'\nimport itemsReducer from './items-reducer'\n\nexport default combineReducers({\n  journal: journalReducer, \n  entries: entriesReducer,\n  items: itemsReducer\n})","import React from 'react'\nimport { connect } from 'react-redux'\nimport { selectEntry } from '../actions'\n\nexport const ListEntries = (props) => {\n  const entries = props.entries.map((item, index) => {\n    return (\n      <button\n        key={`${item.name}-${index}`}\n        onClick={() => {\n          props.selectEntry(index)\n        }}\n      >{item.name}</button>\n    )\n  })\n  return (\n    <div>\n      <h1>Entries</h1>\n      {entries}\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    entries: state.entries,\n    currentEntry: state.journal.currentEntry\n  }\n}\n\nexport default connect(mapStateToProps, { selectEntry })(ListEntries)","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { addItem } from '../actions'\n\nconst AddItem = (props) => {\n  const [ text, setText ] = useState('')\n\n  return (\n    <div>\n\n      <input \n        type=\"text\"\n        placeholder=\"Enter Item\"\n        value={text}\n        onChange={(e) => {\n          setText(e.target.value)\n        }}\n      />\n\n      <button\n        onClick={() => {\n          props.addItem(props.entryIndex, text)\n          setText('')\n        }}\n      >+</button>\n    </div>\n  )\n}\n\n\n\nexport default connect(null, { addItem })(AddItem)","import React, { useState } from 'react'\nimport { STATUS_COMPLETE, STATUS_DEFAULT, STATUS_EVENT, STATUS_INCOMPLETE, STATUS_NOTE, STATUS_SAVE } from '../status-types'\n\nconst StatusSelector = (props) => {\n  const [status, setStatus] = useState(props.status || '•')\n  return (\n    <select \n        value={status}\n        onChange={(e) => {\n          setStatus(e.target.value)\n          props.changeStatus(e.target.value)\n        }}\n      >\n        <option>{STATUS_DEFAULT}</option>\n        <option>{STATUS_COMPLETE}</option>\n        <option>{STATUS_INCOMPLETE}</option>\n        <option>{STATUS_SAVE}</option>\n        <option>{STATUS_NOTE}</option>\n        <option>{STATUS_EVENT}</option>\n      </select>\n  )\n}\n\nexport default StatusSelector","import React, { useState } from 'react'\nimport StatusSelector from './StatusSelector'\nimport { connect } from 'react-redux'\nimport { changeStatus, changeText } from '../actions'\n\nconst Item = (props) => {\n  // const [status, setStatus] = useState(props.status)\n  const [text, setText] = useState(props.text)\n\n  return (\n    <div>\n\n      <StatusSelector \n        status={props.status} \n        changeStatus={(status) => {\n          props.changeStatus(props.entryIndex, props.index, status)\n        }} />\n\n      <input\n        placeholder=\"enter some text\" \n        value={text} \n        onChange={(e) => setText(e.target.value)}\n        onBlur={() => {\n          props.changeText(props.entryIndex, props.index, text)\n        }} \n      />\n\n    </div>\n  )\n}\n\nexport default connect(null, { changeStatus, changeText })(Item)","import React from 'react'\nimport { connect } from 'react-redux'\nimport Item from './Item'\n\nconst ListItems = (props) => {\n  const items = props.items.map((item, index) => {\n    return (\n      <Item\n        key={`item-${index}-${props.currentEntry}`}\n        entryIndex={props.currentEntry}\n        index={index}\n        status={item.status}\n        text={item.text}\n      />\n    )\n  })\n  return (\n    <div>\n      {items}\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  const { journal, items } = state\n\n  return {\n    currentEntry: journal.currentEntry,\n    items: items[journal.currentEntry]\n  }\n}\n\nexport default connect(mapStateToProps)(ListItems)","import React from 'react'\nimport { connect } from 'react-redux'\nimport AddItem from './AddItem'\nimport ListItems from './ListItems'\nimport { addEntry } from '../actions'\n\nexport const ShowEntry = (props) => {\n  return (\n    <div>\n      <h1>Show Entry</h1>\n      <h2>{props.entry.name}</h2>\n      <ListItems />\n      <AddItem entryIndex={props.currentEntry} />\n      <div>\n        <button\n          onClick={() => {\n            props.addEntry(null, props.entriesLength)\n          }}\n        >New Entry</button>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  const { journal, entries } = state\n\n  return {\n    entriesLength: entries.length,\n    currentEntry: journal.currentEntry,\n    entry: entries[journal.currentEntry]\n  }\n}\n\nexport default connect(mapStateToProps, { addEntry })(ShowEntry)","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport reducers from './reducers'\nimport ListEntries from './components/ListEntries'\nimport ShowEntry from './components/ShowEntry'\nimport { loadState, saveState } from './local-store'\n\nimport './App.css'\n\nconst persistedState = loadState()\nconst store = createStore(reducers, persistedState)\nstore.subscribe(() => {\n  saveState(store.getState())\n})\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <ListEntries />\n        <ShowEntry />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App\n","const SIMPLE_JOURNAL = \"SIMPLE_JOURNAL\"\n\n// Load State\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(SIMPLE_JOURNAL)\n    if (serializedState === null) {\n      return undefined\n    }\n    return JSON.parse(serializedState)\n  } catch(err) {\n    return undefined\n  }\n}\n\n// Save State\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem(SIMPLE_JOURNAL, serializedState)\n  } catch(err) {\n    console.log(\"Error saving data\")\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}